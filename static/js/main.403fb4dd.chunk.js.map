{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar1","person","grammar2","day","grammar3","whole_day","grammar4","time","grammar5","confirm","dmMachine","initial","id","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","choose","confirm_without_time","confirm_with_time","final","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.403fb4dd.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar1: { [index: string]: { person?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Monica\": { person: \"Monica Svensson\" },\n    \"Sven\": { person: \"Sven Svensson\" },\n    \"Jack\": { person: \"Jack Svensson\" },}\nconst grammar2: { [index: string]: { day?: string } } = {\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },}\nconst grammar3: { [index: string]: { whole_day?: boolen } } = {\n    \"yes\": { whole_day: true },\n    \"no\": { whole_day: false },\n    \"whole day\": { whole_day: true },\n    \"of course\": { whole_day: true },\n    \"no way\": { whole_day: false },}\nconst grammar4: { [index: string]: { time?: string } } = {\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },}\nconst grammar5: { [index: string]: { confirm?: boolen } } = {\n    \"yes\": { confirm: true },\n    \"confirm\": { confirm: true },\n    \"no\": { confirm: false },\n    \"start over\": { confirm: false },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    id: \"main\",\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar1[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar1[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar2[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar2[context.recResult].day } }),\n                    target: \"whole_day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand which day you mean.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"whole_day\" in (grammar3[context.recResult] || {}),\n                    actions: assign((context) => { return { whole_day: grammar3[context.recResult].whole_day } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#main.time', cond: (context) => context.whole_day === false},\n                             {target: '#main.confirm_without_time'}] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar4[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar4[context.recResult].time } }),\n                    target: \"confirm_with_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}, ${context.day}. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say a time.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_without_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n                    \n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#main.final', cond: (context) => context.confirm === true },\n                             {target: '#main.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_with_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#main.final', cond: (context) => context.confirm === true },\n                             {target: '#main.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            states: {\n                prompt: { \n                    type: \"final\",\n                    entry: say(\"Your appointment has been created!\") }\n            }\n        },\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lt2216-a2.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}