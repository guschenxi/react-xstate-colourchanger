{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar1","person","grammar2","day","grammar3","whole_day","grammar4","time","grammar5","confirm","dmMachine","initial","id","states","welcome","on","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","choose","confirm_without_time","confirm_with_time","final","TODOitem","Timer","inspect","url","iframe","machine","Machine","dm","IntentMachine","undefined","intent","error","init","CLICK","idle","loading","invoke","src","nluRequest","onDone","event","data","onError","success","failure","dmAppointment","asrtts","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f91ef813.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar1: { [index: string]: { person?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Monica\": { person: \"Monica Svensson\" },\n    \"Sven\": { person: \"Sven Svensson\" },\n    \"Jack\": { person: \"Jack Svensson\" },}\nconst grammar2: { [index: string]: { day?: string } } = {\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },}\nconst grammar3: { [index: string]: { whole_day?: boolen } } = {\n    \"yes\": { whole_day: true },\n    \"no\": { whole_day: false },\n    \"whole day\": { whole_day: true },\n    \"of course\": { whole_day: true },\n    \"no way\": { whole_day: false },}\nconst grammar4: { [index: string]: { time?: string } } = {\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },}\nconst grammar5: { [index: string]: { confirm?: boolen } } = {\n    \"yes\": { confirm: true },\n    \"confirm\": { confirm: true },\n    \"no\": { confirm: false },\n    \"start over\": { confirm: false },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"appointmentMachine\",\n    states: {\n\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar1[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar1[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar2[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar2[context.recResult].day } }),\n                    target: \"whole_day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand which day you mean.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"whole_day\" in (grammar3[context.recResult] || {}),\n                    actions: assign((context) => { return { whole_day: grammar3[context.recResult].whole_day } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.time', cond: (context) => context.whole_day === false},\n                             {target: '#appointmentMachine.confirm_without_time'}] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar4[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar4[context.recResult].time } }),\n                    target: \"confirm_with_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}, ${context.day}. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say a time.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_without_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n                    \n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.final', cond: (context) => context.confirm === true },\n                             {target: '#appointmentMachine.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_with_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.final', cond: (context) => context.confirm === true },\n                             {target: '#appointmentMachine.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            states: {\n                prompt: { \n                    type: \"final\",\n                    entry: say(\"Your appointment has been created!\") }\n            }\n        },\n    }\n})\n\n\nexport const TODOitem: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"TODOitem\",\n    states: {\n        welcome: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Choose an item to do.\") }\n            }\n        },\n    }\n})\n\nexport const Timer: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"Timer\",\n    states: {\n        welcome: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Let's set a timer.\") }\n            }\n        },\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine, TODOitem, Timer } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n          initial: 'IntentMachine',\n          id: \"main\",\n          states:{\n\n/* Intent Machine START*/\n\n                IntentMachine: {\n  id: 'intent',\n  initial: 'init',\n  context: {\n    text: undefined,\n    intent: undefined,\n    error: undefined\n  },\n  states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"intent\" },\n            states: {\n                prompt: { entry: say(\"Welcome!\") }\n            }\n        },\n        intent: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    actions: assign((context) => { return { text: context.recResult } }),\n                    target: \"idle\"\n                }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What would you like to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n            }\n        },\n   idle: {\n      on: {\n        \"\": 'loading'\n      }\n    },\n    loading: {\n      invoke: {\n        id: 'getIntent',\n        src: (context) => nluRequest(context.text),\n        onDone: {\n          target: 'success',\n          actions: assign({ intent: (context, event) => event.data })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (context, event) => event.data })\n        }\n      }\n    },\n    success: {\n                      on: {\n                        \"\": [\n                             {target: '#root.dm.dmAppointment', cond: (context) => context.intent === \"Appointment\" },\n                             {target: '#root.dm.TODOitem', cond: (context) => context.intent === \"TODOitem\" },\n                             {target: '#root.dm.Timer', cond: (context) => context.intent === \"Timer\" }\n                            ] \n                      }\n    },\n    failure: {\n      on: {\n        \"\" : [{\n                    target: \"intent\"\n                    /* pretending get correct value from RASA, and try next steps\n                    actions: assign((context) => { return { intent: \"TODOitem\" } }),\n                    target: \"success\"\n                    */\n\n                }]\n      }\n    }\n  }\n},\n\n/* Intent Machine END*/\n\n                dmAppointment: {...dmMachine},\n                TODOitem: {...TODOitem},\n                Timer: {...Timer},\n            }\n\n\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lt2216-a2.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n //       headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n\n"],"sourceRoot":""}