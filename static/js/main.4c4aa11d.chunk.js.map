{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar1","person","grammar2","day","grammar3","whole_day","grammar4","time","grammar5","confirm","dmMachine","initial","id","states","startover","entry","on","ENDSPEECH","stop","always","welcome","prompt","who","RECOGNISED","target","cond","context","recResult","actions","assign","ask","nomatch","repeat","choose","confirm_without_time","confirm_with_time","final","TODOitem","Timer","inspect","url","iframe","machine","Machine","dm","init","CLICK","IntentMachine","undefined","intent","error","loading","invoke","src","nluRequest","onDone","event","data","onError","success","confidence","name","failure","more_info","dmAppointment","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4c4aa11d.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar1: { [index: string]: { person?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Monica\": { person: \"Monica Svensson\" },\n    \"Sven\": { person: \"Sven Svensson\" },\n    \"Jack\": { person: \"Jack Svensson\" },}\nconst grammar2: { [index: string]: { day?: string } } = {\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },}\nconst grammar3: { [index: string]: { whole_day?: boolen } } = {\n    \"yes\": { whole_day: true },\n    \"no\": { whole_day: false },\n    \"whole day\": { whole_day: true },\n    \"of course\": { whole_day: true },\n    \"no way\": { whole_day: false },}\nconst grammar4: { [index: string]: { time?: string } } = {\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },}\nconst grammar5: { [index: string]: { confirm?: boolen } } = {\n    \"yes\": { confirm: true },\n    \"confirm\": { confirm: true },\n    \"no\": { confirm: false },\n    \"start over\": { confirm: false },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"appointmentMachine\",\n    states: {\n\n        startover: {\n            entry: say(\"Ok. starting over.\"),\n            on: { ENDSPEECH: \"welcome\" }\n        },\n\n        stop: {\n            entry: say(\"Ok. Going back to the root menu.\"),\n            always: '#root.dm.IntentMachine.welcome'\n        },\n\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'welcome', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"person\" in (grammar1[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar1[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them. Say for example Monica\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"repeat\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'who', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"day\" in (grammar2[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar2[context.recResult].day } }),\n                    target: \"whole_day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                repeat: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. Meeting with ${context.person}.`\n                    })),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: ` On which day is your meeting? `\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand which day you mean. Say for example on Tuesday\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        whole_day: {\n            initial: \"repeat\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'day', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"whole_day\" in (grammar3[context.recResult] || {}),\n                    actions: assign((context) => { return { whole_day: grammar3[context.recResult].whole_day } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                repeat: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. Meeting with ${context.person} on ${context.day}.`\n                    })),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: ` Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.time', cond: (context) => context.whole_day === false},\n                             {target: '#appointmentMachine.confirm_without_time'}] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"repeat\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'whole_day', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"time\" in (grammar4[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar4[context.recResult].time } }),\n                    target: \"confirm_with_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                repeat: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. `\n                    })),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand which time you mean. Say for example at eleven\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_without_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'whole_day', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n                    \n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.final', cond: (context) => context.confirm === true },\n                             {target: '#appointmentMachine.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_with_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                { target: 'time', cond: (context) => context.recResult === 'go back' },\n                { target: 'startover', cond: (context) => context.recResult === 'start over' },\n                {\n                    cond: (context) => \"confirm\" in (grammar5[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: grammar5[context.recResult].confirm } }),\n                    target: \".choose\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to creat an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                choose: {\n                      on: {\n                        \"\": [\n                             {target: '#appointmentMachine.final', cond: (context) => context.confirm === true },\n                             {target: '#appointmentMachine.who', cond: (context) => context.confirm === false }\n                            ] \n                      }\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand. Say yes or no.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            states: {\n                prompt: { \n                    type: \"final\",\n                    entry: say(\"Your appointment has been created!\") }\n            }\n        },\n    }\n})\n\n\nexport const TODOitem: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"TODOitem\",\n    states: {\n        welcome: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Choose an item to do.\") }\n            }\n        },\n    }\n})\n\nexport const Timer: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    id: \"Timer\",\n    states: {\n        welcome: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Let's set a timer.\") }\n            }\n        },\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine, TODOitem, Timer } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n          initial: 'init',\n          id: \"main\",\n          states:{\n              init: {on: {CLICK: 'IntentMachine'}\n        },\n/* Intent Machine START*/\n\n                IntentMachine: {\n  id: 'intent',\n  initial: 'welcome',\n  context: {\n    text: undefined,\n    intent: undefined,\n    error: undefined\n  },\n  states: {\n\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"intent\" },\n            states: {\n                prompt: { entry: say(\"Welcome!\") }\n            }\n        },\n        intent: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    actions: assign((context) => { return { text: context.recResult } }),\n                    target: \"loading\"\n                }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What would you like to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n            }\n        },\n\n    loading: {\n      invoke: {\n        id: 'getIntent',\n        src: (context) => nluRequest(context.text),\n        onDone: {\n          target: 'success',\n          actions: assign({ intent: (context, event) => event.data })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (context, event) => event.data })\n        }\n      }\n    },\n    success: {\n            on: {\n              \"\": [\n                   {target: 'more_info', cond: (context) => context.intent.intent.confidence < 0.70 },\n                   {target: '#root.dm.dmAppointment', cond: (context) => context.intent.intent.name === \"Appointment\" },\n                   {target: '#root.dm.TODOitem', cond: (context) => context.intent.intent.name === \"TODOitem\" },\n                   {target: '#root.dm.Timer', cond: (context) => context.intent.intent.name === \"Timer\" },\n                   {target: 'more_info' }\n                  ] \n                 }\n    },\n    failure: {\n      entry: say(\"I can't figure out what you want me to do.\"),\n      on: { ENDSPEECH: \"intent\" }\n    },\n    more_info: {\n      entry: say(\"I'm not very sure about your intent. Try to specify it.\"),\n      on: { ENDSPEECH: \"intent\" }\n    }\n  }\n},\n\n/* Intent Machine END*/\n\n                dmAppointment: {...dmMachine},\n                TODOitem: {...TODOitem},\n                Timer: {...Timer},\n            }\n\n\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lt2216-a2.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n\n"],"sourceRoot":""}